import fastify from 'fastify';
import cors from '@fastify/cors';
import dotenv from 'dotenv';
import { createSendOrder } from './routes/create-order';
import { getProducts } from './routes/create-menu';
import { sendEmailRoute } from './routes/create-email';
import Multipart from '@fastify/multipart';

// Carregar vari√°veis de ambiente do arquivo .env
dotenv.config();

const app = fastify();

async function startServer() {
  // Registra o plugin CORS com op√ß√µes mais flex√≠veis
  await app.register(cors, {
    origin: (origin, cb) => {
      const allowedOrigins = ['http://localhost:5173']; // Adicione outros dom√≠nios permitidos aqui
      if (!origin || allowedOrigins.includes(origin)) {
        cb(null, true);
      } else {
        cb(new Error('Not allowed'), false);
      }
    },
    methods: ['GET', 'POST', 'PUT', 'DELETE'],
    credentials: true, // Se voc√™ precisar de credenciais (cookies, autoriza√ß√£o)
    allowedHeaders: ['Content-Type', 'Authorization'], // Especifique os cabe√ßalhos permitidos
  });

  // Registra o plugin Multipart para lidar com uploads de arquivos
  await app.register(Multipart, {
    attachFieldsToBody: true, // Anexa os campos do formul√°rio ao corpo da requisi√ß√£o
    limits: {
      fieldNameSize: 100, // Tamanho m√°ximo do nome do campo (em bytes)
      fieldSize: 1048576, // Tamanho m√°ximo do campo (em bytes, 1MB por padr√£o)
      fields: 10, // N√∫mero m√°ximo de campos n√£o-arquivo
      fileSize: 1048576, // Tamanho m√°ximo do arquivo (em bytes, 1MB por padr√£o)
      files: 2, // N√∫mero m√°ximo de arquivos
      headerPairs: 2000 // N√∫mero m√°ximo de pares de cabe√ßalho
    }
  });

  // Registra as rotas
  app.register(createSendOrder);
  app.register(getProducts);
  app.register(sendEmailRoute);

  // Tratamento de erros mais detalhado
  app.setErrorHandler((error, request, reply) => {
    console.error(error);

    // Erro relacionado a upload de arquivo
    if (error.name === 'FastifyError' && error.message.includes('Multipart')) {
      return reply.status(400).send({ message: 'Erro no upload do arquivo.' });
    }

    // Erro de valida√ß√£o
    if (error.validation) {
      return reply.status(400).send({ message: 'Erro de valida√ß√£o.', errors: error.validation });
    }

    // Erro gen√©rico
    return reply.status(500).send({ message: 'Erro interno do servidor.' });
  });

  // Inicia o servidor
  try {
    await app.listen({
      host: '0.0.0.0',
      port: 3334,
    });
    console.log('üöÄ Servidor HTTP em execu√ß√£o!');
  } catch (err) {
    console.error(err);
    process.exit(1);
  }
}

startServer();
